import{_ as a,c as e,o as n,b0 as l}from"./chunks/framework.JcZxIv1X.js";const m=JSON.parse('{"title":"LV040-代码段","description":null,"frontmatter":{"title":"LV040-代码段","date":"2025-10-15T09:31:20.000Z","icon":"famicons:logo-markdown","permalink":"/sdoc/assembly/assembly/register/126b0e8f9b802d04654ddc64","index":true,"tags":null,"categories":null,"copyright":false,"keywords":null,"cover":null,"comments":null,"mathjax":null,"top":null,"description":null,"tdoc":{"detailDate":"2025-10-15T09:31:20.720Z","fulluuid":"4654ddc645ba4d94a851573cb63a6412","useduuid":"4654ddc64"}},"headers":[],"relativePath":"sdoc/assembly/assembly/register/126b0e8f9b802d04654ddc64.md","filePath":"sdoc/01-Assembly/10-汇编语言/05-寄存器/LV040-代码段.md","lastUpdated":1760405208000}'),t={name:"sdoc/assembly/assembly/register/126b0e8f9b802d04654ddc64.md"};function p(d,s,i,r,c,o){return n(),e("div",null,[...s[0]||(s[0]=[l(`<h1 id="lv040-代码段" tabindex="-1">LV040-代码段 <a class="header-anchor" href="#lv040-代码段" aria-label="Permalink to &quot;LV040-代码段&quot;">​</a></h1><p>前面讲过, 对于 8086PC 机, 在编程时, 可以根据需要, 将一组内存单元定义为一个段。我们可以将长度为 N(N &lt; 64KB)的一组代码, 存在一组地址连续、起始地址为 16 的倍数的内存单元中, 我们可以认为, 这段内存是用来存放代码的, 从而定义了一个代码段。</p><p>比如, 将:</p><div class="language-assembly vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">assembly</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mov ax,0000  ; (B8 00 00)</span></span>
<span class="line"><span>add ax,0123H ; (05 23 01)</span></span>
<span class="line"><span>mov bx,ax    ; (8B D8)</span></span>
<span class="line"><span>jmp bx       ; (FF E3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这段长度为 10 个字节的指令, 存放在 123B0H~123B9H 的一组内存单元中, 我们就可以认为, 123B0H~123B9H 这段内存是用来存放代码的, 是一个代码段, 它的段地址为 123BH, 长度为 10 个字节。</p><p>如何使得代码段中的指令被执行呢?将一段内存当作代码段, 仅仅是我们在编程时的一种安排, CPU 并不会由于这种安排, 就自动地将我们定义的代码段中的指令当作指令来执行。CPU 只认被 CS: IP 指向的内存单元中的内容为指令。所以, 要让 CPU 执行我们放在代码段中的指令, 必须要将 CS: IP 指向所定义的代码段中的第一条指令的首地址。</p><p>对于上面的例子, 我们将一段代码存放在 123B0H~123B9H 内存单元中, 将其定义为代码段, 如果要让这段代码得到执行, 可设 CS = 123BH、IP = 0000H。</p>`,7)])])}const u=a(t,[["render",p]]);export{m as __pageData,u as default};
